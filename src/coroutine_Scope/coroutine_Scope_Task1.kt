package coroutine_Scope

import kotlinx.coroutines.*

/**
 * 1. Написать программу покупки продукта в магазине.
 * Она запускается с фразы "Программа покупки продуктов".
 * Далее через секундную задержку предлагает оплатить товар:
 * "Купить товар:\n1.Да\n2.Нет".
 *
 * Если да, то запускается корутина, в которой идет процесс оплаты:
 * "Оплата продукта началась"-> через 2 сек -> "Сканирование и обработка..." -> через 2 сек ->"Покупка оплачена."
 *
 * Если нет, то запускается корутина отмены оплаты:
 * "Отмена покупки..." -> через 2 сек ->"Покупка отменена."
 *
 * В любом другом случае – выходит ошибка.
 *
 * Написать корутину, которая отвечает за окончание работы и выводит сообщение
 * "До свидания". Она может запускаться при любом вышеуказанном исполнении программы в конце.
 */
suspend fun main() = coroutineScope { //coroutineScope {
    println("Программа покупки продуктов")
    delay(1000L)
    println("Купить товар:\n1.Да\n2.Нет")
    var choice = readln()
    try {
        when (choice.toInt()) {
            1 -> launch { buy() }.join()
            2 -> launch { canceling() }.join()
            else -> println("Ошибка.")
        }
    } catch (e: Exception){
        println("Ошибка.")
    }
    launch { println("До свидания.") }.join()
}

private suspend fun canceling() {
    println("Отмена покупки...")
    delay(2000L)
    println("Покупка отменена.")
}

private suspend fun buy() {
    println("Оплата продукта началась")
    delay(2000L)
    println("Сканирование и обработка...")
    delay(2000L)
    println("Покупка оплачена.")
}
